<?php
namespace App\Controller;

use EasyCorp\Bundle\EasyAdminBundle\Event\EasyAdminEvents;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AdminController as BaseAdminController;
use Doctrine\ORM\Query\ResultSetMapping;

use App\Service\Country;
use App\Service\ModerationLog;
use App\Service\EmailService;

use App\Entity\User;
use App\Entity\Moderation;
use App\Entity\ConferenceSessionUser;

class UserController extends BaseAdminController
{

    private $countryService;
    private $moderationLogService;
    private $mailer;
    private $sender;

    public function __construct(Country $country, ModerationLog $modLog, EmailService $mailer)
    {
        $this->countryService = $country;
        $this->moderationLogService = $modLog;
        $this->mailer = $mailer->getMailer();
        $this->sender = $mailer->getSender();
    }

    public function updateUserEntity($entity)
    {
        $id = $this->request->query->get('id');

        $conn = $this->em->getConnection();
        $sql = "SELECT fullname, is_banned, is_photo_valid, email FROM user WHERE id = ? LIMIT 1";
        $stmt = $conn->prepare($sql);
        $stmt->bindValue(1, $id);
        $stmt->execute();
        $user = $stmt->fetchAll();

        if (count($user) > 0) {

            if ($entity->getFullname() != $user[0]['fullname']) {
               $this->moderationLogService->logModeration($id, $this->moderationLogService::UPDATE_PROFILE_NAME);
            }

            if (intval($entity->getIsPhotoValid()) != intval($user[0]['is_photo_valid']) && intval($entity->getIsPhotoValid()) == 0) {

                $this->sendEmail('profile_photo_invalid', $user[0]['email']);
            }

            if (intval($entity->getIsBanned()) != intval($user[0]['is_banned'])) {

                if (intval($entity->getIsBanned()) == 1) {
                    $this->sendEmail('banned', $user[0]['email']);

                }
                if (intval($entity->getIsBanned()) == 0) {
                    $this->sendEmail('unbanned', $user[0]['email']);
                }

            }

        }

        parent::updateEntity($entity);
    }

    public function editAction()
    {
        $ajaxUpdatedPropery = $this->request->query->get('property');
        $newValue = $this->request->query->get('newValue');

        if ($ajaxUpdatedPropery == 'isPhotoValid' || $ajaxUpdatedPropery == 'isBanned') {

            $to = null;
            $id = $this->request->query->get('id');

            $conn = $this->em->getConnection();
            $sql = "SELECT email FROM user WHERE id = ? LIMIT 1";
            $stmt = $conn->prepare($sql);
            $stmt->bindValue(1, $id);
            $stmt->execute();
            $user = $stmt->fetchAll();

            if (count($user) > 0) {
                $to = $user[0]['email'];
            }

            if (!is_null($to)) {

                switch($ajaxUpdatedPropery) {

                    case 'isPhotoValid' :
                        if ($newValue == 'false') {

                            $this->sendEmail('profile_photo_invalid', $to);
                        }
                    break;

                    case 'isBanned' :
                        if ($newValue == 'true') {
                            $this->sendEmail('banned', $to);
                        }

                        if ($newValue == 'false') {
                            $this->sendEmail('unbanned', $to);
                        }
                }
            }
        }

        return parent::editAction(); // TODO: Change the autogenerated stub
    }

    public function showAction()
    {
        $this->dispatch(EasyAdminEvents::PRE_SHOW);

        $id = $this->request->query->get('id');
        $easyadmin = $this->request->attributes->get('easyadmin');

        $entity = $easyadmin['item'];
        //convert country code to country name
        $entity->setCountryCode($this->countryService->getCountry($entity->getCountryCode()));


        $rooms = $entity->getRooms()->getValues();
        $moderations = $entity->getModeration()->getValues();
        $conferences = $entity->getConference()->getValues();
        $conferencesInfo = $this->getConferencesInfo($conferences);

        $fields = $this->entity['show']['fields'];
        $deleteForm = $this->createDeleteForm($this->entity['name'], $id);

        $this->dispatch(EasyAdminEvents::POST_SHOW, array(
            'deleteForm' => $deleteForm,
            'fields' => $fields,
            'entity' => $entity,
        ));

        $parameters = array(
            'entity' => $entity,
            'moderations' => $moderations,
            'conferencesIsKp' => $conferencesInfo[0],
            'conferencesIsNotKp' => $conferencesInfo[1],
            'fields' => $fields,
            'delete_form' => $deleteForm->createView(),
        );

        return $this->executeDynamicMethod('render<EntityName>Template', array('show', $this->entity['templates']['show'], $parameters));
    }

    public function getConferencesInfo($confs)
    {
        $sessionsIsKp = array();
        $sessionsIsNotKp = array();

        if (count($confs) > 0) {
            foreach($confs as $key => $conf) {

                $this->formatConferenceInfo($conf);
                $sessions = $this->formatConferenceInfo($conf);

                switch ($conf->getIsKp()) {
                    case true:
                        $sessionsIsKp = array_merge($sessionsIsKp, $sessions);
                        break;

                    case false:
                        $sessionsIsNotKp = array_merge($sessionsIsNotKp, $sessions);
                        break;
                }
            }
        }

        return array($sessionsIsKp, $sessionsIsNotKp);
    }

    public function formatConferenceInfo($conf)
    {
        $sessionId = $conf->getConferenceSessionId();

        $confInfo = array();
        $confInfo[$sessionId] = array();
        $confInfo[$sessionId]['dataStart'] = $conf->getDataStart();
        $confInfo[$sessionId]['duration'] = $conf->getDuration();
        $confInfo[$sessionId]['costEth'] = $conf->getCostEth() / 10 ** 18;
        $confInfo[$sessionId]['costUsd'] = $conf->getCostUsd();

        $conferencesRepository = $this->em->getRepository(ConferenceSessionUser::class);
        $conferenceParticipants = $conferencesRepository->findBy(array('conferenceSessionId' => $sessionId));

        if(count($conferenceParticipants) > 0) {
            foreach ($conferenceParticipants as $key => $participant) {

                if($participant->getUserId() != $this->request->query->get('id')) {

                    switch ($conf->getIsKp()) {

                        case true:
                            $confInfo[$sessionId]['participants'][$participant->getUser()->getEmail()] =
                                ($participant->getCostEth() / 10 ** 18) . ' ETH /' . $participant->getCostUsd() . '$';

                            break;

                        case false:
                            $confInfo[$sessionId]['participants'][] = $participant->getUser()->getEmail();
                            if ($participant->getIsKp()) {
                                $confInfo[$sessionId]['kp'] = $participant->getUser()->getEmail();
                            }

                            break;
                    }
                }
            }
        }
        return $confInfo;
    }

    public function sendEmail($type, $to = null)
    {
        $from = $this->sender;
        $status = 2;

        if (!is_null($to)) {

            $message = new \Swift_Message;
            $logo = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/logo.png'));
            $heart = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/heart.png'));

            $message->setFrom($from);
            $message->setTo($to);

            switch ($type) {

                case 'banned' :
                    $sadFace = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/sad.png'));
                    $message->setSubject(' Donâ€™t do evil');
                    $message->setBody(
                        $this->renderView(
                            'emails/account_banned.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'sad' => $sadFace
                            )
                        ),
                        'text/html'
                    );
                    break;


                case 'unbanned' :
                    $smileFace = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/smiling.png'));
                    $message->setSubject('Welcome back to Frizbee!');
                    $message->setBody(
                        $this->renderView(
                            'emails/account_unbanned.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'smiling' => $smileFace
                            )
                        ),
                        'text/html'
                    );

                    break;

                case 'confirmation_kp' :
                    $timer = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/timer.png'));
                    $dollar2 = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/dollar2.png'));
                    $attendees = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/attendees.png'));
                    $message->setSubject('You did a Frizbee run!');
                    $message->setBody(
                        $this->renderView(
                            'emails/session_confirmation_kp.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'timer' => $timer,
                                'dollar2' => $dollar2,
                                'attendees' => $attendees
                            )
                        ),
                        'text/html'
                    );

                    break;

                case 'confirmation_student' :
                    $timer = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/timer.png'));
                    $dollar2 = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/dollar2.png'));
                    $message->setSubject('Your skill just leveled up!');
                    $message->setBody(
                        $this->renderView(
                            'emails/session_confirmation_student.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'timer' => $timer,
                                'dollar2' => $dollar2
                            )
                        ),
                        'text/html'
                    );

                    break;

                case 'profile_photo_invalid' :
                    $walletAttention = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/wallet_attention.png'));
                    $message->setSubject('Have a closer look');
                    $message->setBody(
                        $this->renderView(
                            'emails/profile_photo_invalid.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'wallet_attention' => $walletAttention
                            )
                        ),
                        'text/html'
                    );

                    break;

                case 'direct_message' :
                    $smileFace = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/smiling.png'));
                    $message->setSubject('Youâ€™re a popular person!');
                    $message->setBody(
                        $this->renderView(
                            'emails/direct_message.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'smiling' => $smileFace
                            )
                        ),
                        'text/html'
                    );

                    break;

                case 'request_delete_account' :
                    $message->setSubject(' So this is goodbye?');
                    $message->setBody(
                        $this->renderView(
                            'emails/request_delete_account.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart
                            )
                        ),
                        'text/html'
                    );

                    break;

                case 'welcome' :
                    $arrow = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/arrow.png'));
                    $person = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/person.png'));
                    $group1 = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/group1.png'));
                    $group2 = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/group2.png'));
                    $message->setSubject('Welcome to Frizbee!');
                    $message->setBody(
                        $this->renderView(
                            'emails/website_welcome.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'arrow' => $arrow,
                                'person' => $person,
                                'group1' => $group1,
                                'group2' => $group2
                            )
                        ),
                        'text/html'
                    );

                    break;

                case 'app_welcome_wallet' :
                    $compass = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/compass.png'));
                    $walletAttention = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/wallet_attention.png'));
                    $arrow = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/arrow.png'));
                    $smallCompass = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/small_compass.png'));
                    $search = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/search.png'));
                    $dollar = $message->embed(\Swift_Image::fromPath($this->get('kernel')->getProjectDir() . '/public/email/dollar.png'));
                    $message->setSubject('Username, your Frizbee has landed!');
                    $message->setBody(
                        $this->renderView(
                            'emails/app_welcome_wallet.html.twig',
                            array(
                                'logo' => $logo,
                                'heart' => $heart,
                                'wallet_attention' => $walletAttention,
                                'compass' => $compass,
                                'small_compass' => $smallCompass,
                                'search' => $search,
                                'arrow' => $arrow,
                                'dollar' => $dollar
                            )
                        ),
                        'text/html'
                    );

                    break;

                default:
                    break;
            }

            $status = $this->mailer->send($message);
        }

        return $status;

    }

}


